package weasel.miner;

import weasel.Predef;

public class Miner{
	
	protected final int address;
	
	public Miner(int address){
		this.address = address;
	}
	
	private static final void ensureReadiness(int address){
		if(operationFinished(address)>0)
			throw new AlreadyWorkingException();
	}
	private void ensureReadiness(){
		ensureReadiness(address);
	}
	
	public static final native int operationFinished(int address);
	public static bool waitForOperationFinished(int address){
		int i;
		while((i=operationFinished(address))>0){
			Predef.sleep(1);
		}
		return i==0;
	}
	public bool waitForOperationFinished(){
		return waitForOperationFinished(address);
	}
	
	private static final native void digForward(int address);
	public static bool digForward(int address, bool waitForFinish){
		ensureReadiness(address);
		digForward(address);
		if(waitForFinish){
			return waitForOperationFinished(address);
		}
		return false;
	}
	public bool digForward(bool waitForFinish){
		return digForward(address, waitForFinish);
	}
	
	private static final native void digUpward(int address);
	public static bool digUpward(int address, bool waitForFinish){
		ensureReadiness(address);
		digUpward(address);
		if(waitForFinish){
			return waitForOperationFinished(address);
		}
		return false;
	}
	public bool digUpward(bool waitForFinish){
		return digUpward(address, waitForFinish);
	}
	
	private static final native void digDownward(int address);
	public static bool digDownward(int address, bool waitForFinish){
		ensureReadiness(address);
		digDownward(address);
		if(waitForFinish){
			return waitForOperationFinished(address);
		}
		return false;
	}
	public bool digDownward(bool waitForFinish){
		return digDownward(address, waitForFinish);
	}
	
	private static final native void placeBlock(int address, int invPlace, int x, int y, int z);
	public static bool placeBlock(int address, int invPlace, int x, int y, int z, bool waitForFinish){
		ensureReadiness(address);
		placeBlock(address, invPlace, x, y, z);
		if(waitForFinish){
			return waitForOperationFinished(address);
		}
		return false;
	}
	public bool placeBlock(int invPlace, int x, int y, int z, bool waitForFinish){
		return placeBlock(address, invPlace, x, y, z, waitForFinish);
	}
	
	private static final native void moveForward(int address, int steps);
	public static bool moveForward(int address, int steps, bool waitForFinish){
		ensureReadiness(address);
		moveForward(address, steps);
		if(waitForFinish){
			return waitForOperationFinished(address);
		}
		return false;
	}
	public bool moveForward(int steps, bool waitForFinish){
		return moveForward(address, steps, waitForFinish);
	}
	
	private static final native void rotate(int address, int dir);
	public static bool rotate(int address, int dir, bool waitForFinish){
		ensureReadiness(address);
		rotate(address, dir);
		if(waitForFinish){
			return waitForOperationFinished(address);
		}
		return false;
	}
	public bool rotate(int dir, bool waitForFinish){
		return rotate(address, dir, waitForFinish)
	}
	
	public static native bool isMiningEnabled(int address);
	public bool isMiningEnabled(){
		return isMiningEnabled(address);
	}
	
	public static native bool setMining(int address, bool state);
	public bool setMining(bool enabled){
		return setMining(address, enabled);
	}
}