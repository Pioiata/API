package weasel.miner;

import weasel.Predef;

public class Miner{
	
	protected final int address;
	
	public Miner(int address){
		this.address = address;
	}
	
	private static final void ensureReadiness(int address){
		if(!operationFinished(address))
			throw new AlreadyWorkingException();
	}
	public static final native bool operationFinished(int address);
	public static void waitForOperationFinished(int address){
		while(!operationFinished(address)){
			Predef.sleep(1);
		}
	}
	private static final native void digForward(int address);
	public static void digForward(int address, bool waitForFinish){
		ensureReadiness(address);
		digForward(address);
		if(waitForFinish){
			waitForOperationFinished(address);
		}
	}
	private static final native void moveForward(int address, int steps);
	public static void moveForward(int address, int steps, bool waitForFinish){
		ensureReadiness(address);
		moveForward(address, steps);
		if(waitForFinish){
			waitForOperationFinished(address);
		}
	}
	private static final native void rotate(int address, int dir);
	public static void rotate(int address, int dir, bool waitForFinish){
		ensureReadiness(address);
		rotate(address, dir);
		if(waitForFinish){
			waitForOperationFinished(address);
		}
	}
	public static native bool isMiningEnabled(int address);
	public static native bool setMining(int address, bool state);
	
	
	
	
	
	
	private void ensureReadiness(){
		ensureReadiness(address);
	}
	
	public void waitForOperationFinished(){
		waitForOperationFinished(address);
	}
	
	public void digForward(bool waitForFinish){
		digForward(address, waitForFinish);
	}
	
	public void moveForward(int steps, bool waitForFinish){
		moveForward(address, steps, waitForFinish);
	}
	
	public void rotate(int dir, bool waitForFinish){
		rotate(address, dir, waitForFinish)
	}
	
	public bool isMiningEnabled(){
		isMiningEnabled(address);
	}
	
	public bool setMining(bool enabled){
		setMining(address, enabled);
	}
}